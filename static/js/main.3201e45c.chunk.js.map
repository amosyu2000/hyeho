{"version":3,"sources":["components/Button.js","components/Typewriter.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","newTab","openInNewTab","target","rel","className","href","contents","Typewriter","article","url","title","extract","App","useState","setArticle","useEffect","path","params","paramsArray","Object","entries","k","v","push","fetch","join","fetchAPI","action","explaintext","exsentences","exlimit","format","formatversion","generator","grnnamespace","origin","prop","then","res","json","data","pageid","query","pages","date","Date","toLocaleString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gQASO,SAASA,EAAOC,GAGtB,IAAIC,EAAS,KAGb,OAFID,EAAME,eAAcD,EAAS,CAAEE,OAAQ,SAAUC,IAAK,wBAGzD,qCAAGC,UAAU,MAAMC,KAAMN,EAAMM,MAAUL,GAASD,EAAMO,UCdnD,SAASC,EAAWR,GAC1B,IAAMS,EAAUT,EAAMS,QAAUT,EAAMS,QAAU,GAEhD,OACC,yBAAKJ,UAAU,iDACd,uBAAGA,UAAU,sBAAsBC,KAAMG,EAAQC,IAAKP,OAAO,SAASC,IAAI,uBACxEK,EAAQE,OAEV,6BACEF,EAAQG,UCPN,SAASC,IAAO,IAAD,EAESC,mBAAS,MAFlB,mBAEdL,EAFc,KAELM,EAFK,KAwCrB,OA5BAC,qBAAU,YARV,SAAkBC,EAAMC,GAEvB,IADA,IAAIC,EAAc,GAClB,MAAoBC,OAAOC,QAAQH,GAAnC,eAA4C,CAAC,IAAD,sBAAhCI,EAAgC,KAA9BC,EAA8B,KAC3CJ,EAAYK,KAAZ,UAAoBF,EAApB,YAAyBC,IAE1B,OAAOE,MAAM,GAAD,OAAIR,GAAJ,OAAWE,EAAYO,KAAK,QAkBxCC,CAAS,sCAbsB,CAC9BC,OAAS,QACTC,YAAc,IACdC,YAAc,IACdC,QAAU,IACVC,OAAS,OACTC,cAAgB,IAChBC,UAAY,SACZC,aAAe,IACfC,OAAS,IACTC,KAAO,aAIPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACN1B,EAAW,CACV2B,OAASD,EAAKE,MAAMC,MAAM,GAAGF,OAC7BhC,IAAG,+CAA2C+B,EAAKE,MAAMC,MAAM,GAAGF,QAClE/B,MAAQ8B,EAAKE,MAAMC,MAAM,GAAGjC,MAC5BC,QAAU6B,EAAKE,MAAMC,MAAM,GAAGhC,QAC9BiC,MAAO,IAAIC,MAAOC,wBAGnB,IAGD,yBAAK1C,UAAU,6BACd,yBAAKA,UAAU,OACd,kBAACG,EAAD,CAAYC,QAASA,KAEtB,yBAAKJ,UAAU,sBACd,yBAAKA,UAAU,QACd,kBAAC,EAAD,CAAQE,SAAS,oBAAUD,KAAK,MAEjC,yBAAKD,UAAU,QACd,kBAAC,EAAD,CAAQE,SAAS,qBAAWD,KAAK,QC1ClB0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3201e45c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Button.css';\r\n\r\n// Button that can direct to internal sections or external pages, takes 3 props\r\n// Prop 'href' is the URL or relative path to direct to\r\n// Prop 'contents' is what is written on the button\r\n// Prop 'openInNewTab' is a boolean value indicating whether to open in a new tab\r\n\r\nexport function Button(props) {\r\n\t\r\n\t// Check if openInNewTab is passed as true\r\n\tlet newTab = null;\r\n\tif (props.openInNewTab) newTab = { target: '_blank', rel: 'noopener noreferrer',}\r\n\r\n\treturn (\r\n\t\t<a className=\"btn\" href={props.href} {...newTab}>{props.contents}</a>\r\n\t)\r\n}","import React from 'react';\r\n\r\nexport function Typewriter(props) {\r\n\tconst article = props.article ? props.article : {};\r\n\r\n\treturn (\r\n\t\t<div className=\"v-flex align-items-center text-center font-md\">\r\n\t\t\t<a className=\"font-bold link pb-2\" href={article.url} target=\"_black\" rel=\"noopener noreferrer\">\r\n\t\t\t\t{article.title}\r\n\t\t\t</a>\r\n\t\t\t<div>\r\n\t\t\t\t{article.extract}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","import React, { useState , useEffect } from 'react';\nimport './App.css';\nimport { Button , Typewriter } from './components';\n\nexport function App() {\n\t\n\tconst [article, setArticle] = useState(null);\n\t\n\tfunction fetchAPI(path, params) {\n\t\tlet paramsArray = [];\n\t\tfor (const [k,v] of Object.entries(params)) {\n\t\t\tparamsArray.push(`${k}=${v}`)\n\t\t}\n\t\treturn fetch(`${path}${paramsArray.join('&')}`)\n\t}\n\n\tuseEffect(() => {\n\n\t\tconst WikipediaAPIParameters = {\n\t\t\taction : 'query',\n\t\t\texplaintext : '0',\n\t\t\texsentences : '1',\n\t\t\texlimit : '1',\n\t\t\tformat : 'json',\n\t\t\tformatversion : '2',\n\t\t\tgenerator : 'random',\n\t\t\tgrnnamespace : '0',\n\t\t\torigin : '*',\n\t\t\tprop : 'extracts',\n\t\t}\n\n\t\tfetchAPI('https://en.wikipedia.org/w/api.php?', WikipediaAPIParameters)\n\t\t.then(res => res.json())\n\t\t.then((data) => {\n\t\t\tsetArticle({\n\t\t\t\tpageid : data.query.pages[0].pageid,\n\t\t\t\turl : `https://en.wikipedia.org/wiki/?curid=${data.query.pages[0].pageid}`,\n\t\t\t\ttitle : data.query.pages[0].title,\n\t\t\t\textract : data.query.pages[0].extract,\n\t\t\t\tdate : new Date().toLocaleString(),\n\t\t\t});\n\t\t});\n\t},[]);\n\n\treturn (\n\t\t<div className=\"v-flex align-items-center\">\n\t\t\t<div className=\"p-3\">\n\t\t\t\t<Typewriter article={article} />\n\t\t\t</div>\n\t\t\t<div className=\"h-flex font-md p-3\">\n\t\t\t\t<div className=\"px-3\">\n\t\t\t\t\t<Button contents=\"👍 Yes!\" href=\"\"/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"px-3\">\n\t\t\t\t\t<Button contents=\"👎 Nope.\" href=\"\"/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}